{"version":3,"sources":["components/Canvas.js","utilty/canvass_helper.js","utilty/pdf_helper.js","App.js","serviceWorker.js","index.js","utilty/helper.js"],"names":["Canvas","React","memo","forwardRef","props","ref","console","log","style","border","preventOutsideMovement","e","obj","target","currentHeight","canvas","height","currentWidth","width","setCoords","getBoundingRect","top","left","Math","max","min","left1","top1","scale1x","scale1y","width1","height1","preventOutsideScaling","brNew","scaleX","scaleY","centeredTextProperties","jsonCanvas","pageWidth","absolutePosition","x","centerText","y","alignment","relativePosition","margin","checkRightMargin","leftOrRightAlignedTextProperties","pageLength","textAlign","objectLength","centerOfObject","pdfMake","vfs","pdfFonts","Boolean","window","location","hostname","match","ReactDOM","render","canvasRef","useRef","divRef","jexcelRef","fabricRef","useState","fontSize","setFontSize","count","setCount","useEffect","current","jexcel","minDimensions","defaultColWidth","tableOverflow","tableWidth","tableHeight","title","fabric","objectCaching","preserveObjectStacking","on","parseInt","setHeight","setWidth","renderAll","Object","prototype","set","transparentCorners","cornerColor","cornerStrokeColor","borderColor","cornerSize","padding","cornerStyle","borderDashArray","hasControls","hasRotatingPoint","text","Text","fontFamily","text2","text3","IText","t1","Textbox","setControlsVisibility","mt","mb","ml","mr","bl","br","tl","tr","mtr","Image","fromURL","img","setBackgroundImage","bind","add","generatePdf","loopThroughItems","a","dynamicObjects","rowData","arrayObj","i","length","push","fetch","then","response","blob","Promise","resolve","reject","reader","FileReader","onloadend","result","onerror","readAsDataURL","image","pageBackground","toObject","headers","getHeaders","split","filteredData","getData","filter","some","singlePageObjects","objects","type","src","indexOf","pagesContent","bold","italic","stack","unbreakable","pageBreak","fonts","Roboto","normal","italics","bolditalics","docDefinition","cloneDeep","pageOrientation","pageMargins","content","createPdf","open","onAlignText","propertyValue","activeEl","getActiveObject","requestRenderAll","onImageUpload","config","quality","maxWidth","maxHeight","mimeType","files","readAndCompressImage","inputforupload","readerobj","onload","imgElement","document","createElement","imageinstance","angle","opacity","scaleToWidth","scaleToHeight","centerObject","display","data-tip","onClick","getWidth","bringForward","sendBackwards","remove","id","onChange","accept","name","defaultValue","key","value","toString","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b309bcaf.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Canvas = React.memo(React.forwardRef((props, ref) => {\r\n    console.log('rerendering')\r\n    return (\r\n        <canvas ref={ref} style={{ border: '1px solid red' }}></canvas>\r\n    )\r\n}))\r\nexport default Canvas;","export const preventOutsideMovement = function(e) {\r\n  var obj = e.target;\r\n  // if object is too big ignore\r\n  if (\r\n    obj.currentHeight > obj.canvas.height ||\r\n    obj.currentWidth > obj.canvas.width\r\n  ) {\r\n    return;\r\n  }\r\n  obj.setCoords();\r\n  // top-left  corner\r\n  if (obj.getBoundingRect().top < 0 || obj.getBoundingRect().left < 0) {\r\n    obj.top = Math.max(obj.top, obj.top - obj.getBoundingRect().top);\r\n    obj.left = Math.max(obj.left, obj.left - obj.getBoundingRect().left);\r\n  }\r\n  // bot-right corner\r\n  if (\r\n    obj.getBoundingRect().top + obj.getBoundingRect().height >\r\n      obj.canvas.height ||\r\n    obj.getBoundingRect().left + obj.getBoundingRect().width > obj.canvas.width\r\n  ) {\r\n    obj.top = Math.min(\r\n      obj.top,\r\n      obj.canvas.height -\r\n        obj.getBoundingRect().height +\r\n        obj.top -\r\n        obj.getBoundingRect().top\r\n    );\r\n    obj.left = Math.min(\r\n      obj.left,\r\n      obj.canvas.width -\r\n        obj.getBoundingRect().width +\r\n        obj.left -\r\n        obj.getBoundingRect().left\r\n    );\r\n  }\r\n};\r\n\r\nvar left1 = 0;\r\nvar top1 = 0;\r\nvar scale1x = 0;\r\nvar scale1y = 0;\r\nvar width1 = 0;\r\nvar height1 = 0;\r\n\r\nexport const preventOutsideScaling = function(e) {\r\n  var obj = e.target;\r\n  obj.setCoords();\r\n  var brNew = obj.getBoundingRect();\r\n\r\n  if (\r\n    brNew.width + brNew.left >= obj.canvas.width ||\r\n    brNew.height + brNew.top >= obj.canvas.height ||\r\n    brNew.left < 0 ||\r\n    brNew.top < 0\r\n  ) {\r\n    obj.left = left1;\r\n    obj.top = top1;\r\n    obj.scaleX = scale1x;\r\n    obj.scaleY = scale1y;\r\n    obj.width = width1;\r\n    obj.height = height1;\r\n  } else {\r\n    left1 = obj.left;\r\n    top1 = obj.top;\r\n    scale1x = obj.scaleX;\r\n    scale1y = obj.scaleY;\r\n    width1 = obj.width;\r\n    height1 = obj.height;\r\n  }\r\n};\r\n","export const centeredTextProperties = (jsonCanvas, pageWidth) => {\r\n    if (jsonCanvas.left + jsonCanvas.width / 2 >\r\n        pageWidth / 2) return ({\r\n            absolutePosition: {\r\n                x: centerText(\r\n                    jsonCanvas.left,\r\n                    jsonCanvas.width,\r\n                    842\r\n                ),\r\n                y: jsonCanvas.top - 2,\r\n            },\r\n            alignment: 'center'\r\n        })\r\n    return ({\r\n        relativePosition: {\r\n            x: 0,\r\n            y: jsonCanvas.top - 2,\r\n        },\r\n        margin: checkRightMargin(\r\n            jsonCanvas.left,\r\n            jsonCanvas.width,\r\n            842\r\n        ),\r\n        alignment: 'center'\r\n    })\r\n}\r\n\r\nexport const leftOrRightAlignedTextProperties = (jsonCanvas, pageLength) => {\r\n    if (jsonCanvas.textAlign === 'left') return ({\r\n        absolutePosition: {\r\n            x: jsonCanvas.left,\r\n            y: jsonCanvas.top - 2,\r\n        },\r\n        alignment: 'left'\r\n    })\r\n    return ({\r\n        relativePosition: {\r\n            x: 0,\r\n            y: jsonCanvas.top - 2,\r\n        },\r\n        alignment: 'right',\r\n        margin: [0, 0, pageLength - (jsonCanvas.left + jsonCanvas.width), 0]\r\n    })\r\n\r\n}\r\n\r\nexport const textboxMargin = (x, objectLength, pageLength) => {\r\n    //somehow i need to subtract only the objectLength and not the position x\r\n    const rightMargin = pageLength - (objectLength);\r\n    return [0, 0, rightMargin, 0];\r\n}\r\n\r\n\r\n//for text that cross half of the width\r\n// move the text back equal to the right margin\r\n// for aligned center\r\nfunction centerText(x, objectLength, pageLength) {\r\n    const centerOfObject = x + objectLength / 2;\r\n    if (centerOfObject > pageLength / 2) {\r\n        return centerOfObject - (pageLength - centerOfObject);\r\n    } else {\r\n        return 0;\r\n    }\r\n}\r\n\r\nfunction checkRightMargin(x, objectLength, pageLength) {\r\n    const centerOfObject = x + objectLength / 2;\r\n    if (centerOfObject < pageLength / 2) {\r\n        const rightMargin = pageLength - 2 * centerOfObject;\r\n        return [0, 0, rightMargin, 0];\r\n    } else {\r\n        return [0, 0, 0, 0];\r\n    }\r\n}","import React, { useRef, useEffect, useState, useMemo } from 'react';\r\nimport { fabric } from 'fabric';\r\nimport pdfMake from 'pdfmake';\r\nimport './App.css';\r\nimport { readAndCompressImage } from 'browser-image-resizer';\r\nimport cloneDeep from 'clone-deep';\r\nimport jexcel from 'jexcel';\r\nimport ReactTooltip from 'react-tooltip';\r\nimport pdfFonts from \"pdfmake/build/vfs_fonts\";\r\n\r\nimport {\r\n  FaAlignLeft,\r\n  FaAlignRight,\r\n  FaAlignCenter,\r\n  FaSortNumericUp,\r\n  FaSortNumericDown,\r\n} from 'react-icons/fa';\r\nimport { MdBorderVertical } from 'react-icons/md';\r\n\r\nimport Canvas from './components/Canvas';\r\n\r\nimport {\r\n  preventOutsideMovement,\r\n  preventOutsideScaling,\r\n} from './utilty/canvass_helper.js';\r\n\r\nimport {\r\n  centeredTextProperties,\r\n  leftOrRightAlignedTextProperties,\r\n  textboxMargin,\r\n} from './utilty/pdf_helper';\r\n\r\nimport { toDataURL } from './utilty/helper';\r\n\r\npdfMake.vfs = pdfFonts.pdfMake.vfs;\r\n\r\nexport default function App() {\r\n  const canvasRef = useRef(null);\r\n  const divRef = useRef(null);\r\n  const jexcelRef = useRef(null);\r\n  const fabricRef = useRef(null);\r\n  const [fontSize, setFontSize] = useState(16);\r\n  const [count, setCount] = useState(16);\r\n\r\n  useEffect(() => {\r\n    jexcelRef.current = jexcel(divRef.current, {\r\n      minDimensions: [10, 20],\r\n      defaultColWidth: 100,\r\n      tableOverflow: true,\r\n      tableWidth: '842px',\r\n      tableHeight: '500px',\r\n      minDimensions: [2, 5],\r\n      columns: [{ title: 'Column 1' }, { title: 'Column 2' }],\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fabricRef.current = new fabric.Canvas(canvasRef.current, {\r\n      objectCaching: false,\r\n      preserveObjectStacking: true,\r\n      fontSize: 20,\r\n    });\r\n    fabricRef.current.on('object:moving', preventOutsideMovement);\r\n    fabricRef.current.on('selection:created', (e) => {\r\n      if (e.target.fontSize) {\r\n        setFontSize(parseInt(e.target.fontSize));\r\n      }\r\n    });\r\n\r\n    fabricRef.current.on('object:scaling', preventOutsideScaling);\r\n    fabricRef.current.setHeight(595);\r\n    fabricRef.current.setWidth(842);\r\n    fabricRef.current.renderAll();\r\n\r\n    console.log(fabric);\r\n\r\n    fabric.Object.prototype.set({\r\n      transparentCorners: false,\r\n      cornerColor: '#00FFFF',\r\n      cornerStrokeColor: 'red',\r\n      borderColor: 'red',\r\n      cornerSize: 12,\r\n      padding: 0,\r\n      cornerStyle: 'circle',\r\n      borderDashArray: [3, 3],\r\n      hasControls: false,\r\n      hasRotatingPoint: false,\r\n    });\r\n\r\n    // console.log(canvas.forEachObject());\r\n\r\n    var text = new fabric.Text('Column 1', {\r\n      left: 0,\r\n      fontSize: 30,\r\n      textAlign: 'center',\r\n      hasRotatingPoint: false,\r\n      top: 0,\r\n      fontFamily: 'Roboto',\r\n    });\r\n    var text2 = new fabric.Text('Column 2', {\r\n      left: 0,\r\n      fontSize: 30,\r\n      textAlign: 'center',\r\n      hasRotatingPoint: false,\r\n      top: 0,\r\n      fontFamily: 'Roboto',\r\n    });\r\n    var text3 = new fabric.IText('m', {\r\n      left: 0,\r\n      top: 0,\r\n      fontFamily: 'Roboto',\r\n    });\r\n    var t1 = new fabric.Textbox(\r\n      'Lorem ipsum dibus repellat iusto Lorem ipsum dibus repellat iusto Lorem ipsum dibus repellat iusto Lorem ipsum dibus repellat iusto.',\r\n      {\r\n        width: 200,\r\n        top: 400,\r\n        hasControls: true,\r\n        left: 200,\r\n        fontSize: 16,\r\n        padding: 0,\r\n        textAlign: 'center',\r\n        fontFamily: 'Roboto',\r\n      }\r\n    );\r\n    t1.setControlsVisibility({\r\n      mt: false,\r\n      mb: false,\r\n      ml: true,\r\n      mr: true,\r\n      bl: false,\r\n      br: false,\r\n      tl: false,\r\n      tr: false,\r\n      mtr: false,\r\n    });\r\n\r\n    fabric.Image.fromURL('/certificate2.jpg', function (img) {\r\n      console.log(img);\r\n      const image = fabricRef.current.setBackgroundImage(\r\n        img,\r\n        fabricRef.current.renderAll.bind(fabricRef.current),\r\n        {\r\n          scaleX: fabricRef.current.width / img.width,\r\n          scaleY: fabricRef.current.height / img.height,\r\n        }\r\n      );\r\n      console.log(img);\r\n    });\r\n\r\n    fabricRef.current.add(text3, text2, text, t1);\r\n  }, []);\r\n\r\n  const pageWidth = 842;\r\n  const pageHeight = 695;\r\n  const quality = 1;\r\n\r\n  const generatePdf = async () => {\r\n    const image = await toDataURL('http://localhost:3000/certificate2.jpg', {\r\n      maxWidth: pageWidth,\r\n      maxHeight: pageHeight,\r\n      quality,\r\n    });\r\n    const pageBackground = {\r\n      image: image,\r\n      width: pageWidth,\r\n      height: 595,\r\n      absolutePosition: { x: 0, y: 0 },\r\n    };\r\n\r\n    const jsonCanvas = fabricRef.current.toObject();\r\n    const headers = jexcelRef.current.getHeaders().split(',');\r\n    const filteredData = jexcelRef.current.getData().filter((a) =>\r\n      a.some(function (x) {\r\n        return x;\r\n      })\r\n    );\r\n\r\n    const singlePageObjects = [];\r\n    const dynamicObjects = [];\r\n\r\n    const { objects } = jsonCanvas;\r\n\r\n    for (let i = 0; i < objects.length; i++) {\r\n      if (objects[i].type === 'i-text') {\r\n        singlePageObjects.push({\r\n          text: objects[i].text,\r\n          absolutePosition: {\r\n            x: objects[i].left,\r\n            y: objects[i].top - 2,\r\n          },\r\n          fontSize: objects[i].fontSize,\r\n          alignment: objects[i].textAlign,\r\n        });\r\n      }\r\n      if (objects[i].type === 'image') {\r\n        singlePageObjects.push({\r\n          image: objects[i].src,\r\n          absolutePosition: {\r\n            x: objects[i].left,\r\n            y: objects[i].top - 2,\r\n          },\r\n          width: objects[i].width * objects[i].scaleX,\r\n          height: objects[i].height * objects[i].scaleY,\r\n        });\r\n      }\r\n\r\n      if (objects[i].type === 'textbox') {\r\n        singlePageObjects.push({\r\n          text: objects[i].text,\r\n          relativePosition: {\r\n            x: objects[i].left,\r\n            y: objects[i].top - 2,\r\n          },\r\n          fontSize: objects[i].fontSize,\r\n          alignment: objects[i].textAlign,\r\n          margin: textboxMargin(objects[i].left, objects[i].width, 842),\r\n        });\r\n      }\r\n\r\n      if (objects[i].type === 'text') {\r\n        dynamicObjects.push({\r\n          text: headers.indexOf(objects[i].text),\r\n          ...(objects[i].textAlign === 'center'\r\n            ? centeredTextProperties(objects[i], pageWidth)\r\n            : leftOrRightAlignedTextProperties(objects[i], pageWidth)),\r\n          fontSize: objects[i].fontSize,\r\n        });\r\n      }\r\n    }\r\n\r\n    let pagesContent = [];\r\n    console.log(!filteredData.length || !dynamicObjects.length);\r\n    if (!filteredData.length || !dynamicObjects.length) {\r\n      pagesContent = [\r\n        pageBackground,\r\n        {\r\n          stack: [...singlePageObjects],\r\n          unbreakable: true,\r\n        },\r\n      ];\r\n    } else {\r\n      for (let i = 0; i < filteredData.length; i++) {\r\n        pagesContent = [\r\n          ...pagesContent,\r\n          pageBackground,\r\n          {\r\n            style: { bold: true, italic: true },\r\n            stack: [\r\n              ...singlePageObjects,\r\n              ...loopThroughItems(dynamicObjects, filteredData[i]),\r\n            ],\r\n            unbreakable: true,\r\n            ...(i !== filteredData.length - 1 && { pageBreak: 'after' }),\r\n          },\r\n        ];\r\n      }\r\n    }\r\n\r\n    pdfMake.fonts = {\r\n      Roboto: {\r\n        normal: 'Roboto-Regular.ttf',\r\n        bold: 'Roboto-Medium.ttf',\r\n        italics: 'Roboto-Italic.ttf',\r\n        bolditalics: 'Roboto-MediumItalic.ttf'\r\n      }\r\n    };\r\n\r\n    const docDefinition = cloneDeep({\r\n      pageOrientation: 'landscape',\r\n      pageMargins: 0,\r\n      content: pagesContent,\r\n    });\r\n\r\n    // pdfMake.createPdf(docDefinition, null, null, vfs).open();\r\n    pdfMake.createPdf(docDefinition).open();\r\n\r\n    function loopThroughItems(dynamicObjects, rowData) {\r\n      const arrayObj = [];\r\n      for (let i = 0; i < dynamicObjects.length; i++) {\r\n        arrayObj.push({\r\n          ...dynamicObjects[i],\r\n          text: rowData[dynamicObjects[i].text],\r\n        });\r\n      }\r\n      console.log(arrayObj);\r\n      return arrayObj;\r\n    }\r\n  };\r\n\r\n  const alignCenter = () => {\r\n    const activeEl = fabricRef.current.getActiveObject();\r\n    if (activeEl && activeEl.type) {\r\n      activeEl.set({\r\n        left: fabricRef.current.getWidth() / 2 - activeEl.width / 2,\r\n      });\r\n      activeEl.setCoords();\r\n      fabricRef.current.requestRenderAll();\r\n    }\r\n  };\r\n\r\n  const sendForward = () => {\r\n    const activeEl = fabricRef.current.getActiveObject();\r\n    if (activeEl && activeEl.type) {\r\n      fabricRef.current.bringForward(activeEl);\r\n      fabricRef.current.requestRenderAll();\r\n    }\r\n  };\r\n\r\n  const sendBackward = () => {\r\n    const activeEl = fabricRef.current.getActiveObject();\r\n    if (activeEl && activeEl.type) {\r\n      fabricRef.current.sendBackwards(activeEl);\r\n      fabricRef.current.requestRenderAll();\r\n    }\r\n  };\r\n\r\n  const onSetFontSize = (e) => {\r\n    console.log(e.target.value);\r\n    const activeEl = fabricRef.current.getActiveObject();\r\n    if (activeEl) {\r\n      activeEl.set('fontSize', e.target.value.toString());\r\n      fabricRef.current.requestRenderAll();\r\n    }\r\n  };\r\n\r\n  const onAlignText = (propertyValue, e) => {\r\n    const activeEl = fabricRef.current.getActiveObject();\r\n    if (activeEl) {\r\n      activeEl.set('textAlign', propertyValue);\r\n      fabricRef.current.requestRenderAll();\r\n    }\r\n  };\r\n\r\n  const onRemove = (e) => {\r\n    const activeEl = fabricRef.current.getActiveObject();\r\n    if (activeEl) {\r\n      fabricRef.current.remove(activeEl);\r\n      // fabricRef.current.requestRenderAll();\r\n    }\r\n  };\r\n\r\n  const onImageUpload = async (e) => {\r\n    const config = {\r\n      quality: 0.4,\r\n      maxWidth: canvasRef.current.width / 2,\r\n      maxHeight: canvasRef.current.height / 2,\r\n      mimeType: e.target.files[0].type,\r\n    };\r\n\r\n    if (!e.target.files[0]) return;\r\n\r\n    let inputforupload = await readAndCompressImage(e.target.files[0], config);\r\n\r\n    const readerobj = new FileReader();\r\n\r\n    readerobj.onload = function () {\r\n      var imgElement = document.createElement('img');\r\n      imgElement.src = readerobj.result;\r\n\r\n      imgElement.onload = function () {\r\n        var imageinstance = new fabric.Image(imgElement, {\r\n          angle: 0,\r\n          opacity: 1,\r\n          cornerSize: 12,\r\n          hasControls: true,\r\n        });\r\n\r\n        var cw = canvasRef.current.width;\r\n        var ch = canvasRef.current.height;\r\n\r\n        if (cw > ch) {\r\n          /** canvas ist landscape **/\r\n          imageinstance.scaleToWidth(canvasRef.current.width - 200);\r\n          imageinstance.scaleToHeight(canvasRef.current.height - 200);\r\n        } else {\r\n          /** canvas ist portrait **/\r\n          imageinstance.scaleToHeight(canvasRef.current.height - 200);\r\n          imageinstance.scaleToWidth(canvasRef.current.width - 200);\r\n        }\r\n\r\n        // imageinstance.setControlsVisibility(HideControls);\r\n        //imageinstance.cornerSize(40);\r\n        //  imageinstance[\"cornerSize\"] = parseFloat(40);\r\n        // removes the right top control\r\n        fabricRef.current.add(imageinstance);\r\n        fabricRef.current.centerObject(imageinstance);\r\n      };\r\n    };\r\n\r\n    readerobj.readAsDataURL(inputforupload);\r\n  };\r\n\r\n  const logCanvas = () => {\r\n    const activeEl = fabricRef.current.getActiveObject();\r\n    if (activeEl) {\r\n      console.log(activeEl.toObject());\r\n      return;\r\n    }\r\n    console.log(fabricRef.current.toObject());\r\n    // console.log(JSON.stringify( fabricRef.current));\r\n  };\r\n\r\n  const stateChange = () => {\r\n    setCount(count + 1);\r\n  };\r\n\r\n  return (\r\n    <div style={{ display: 'flex' }}>\r\n      <ReactTooltip />\r\n      <div>\r\n        <Canvas ref={canvasRef} />\r\n        <div>\r\n          <button\r\n            data-tip=\"Text Align Left\"\r\n            onClick={() => onAlignText('left')}\r\n          >\r\n            <FaAlignLeft />\r\n          </button>\r\n          <button\r\n            data-tip=\"Text Align Center\"\r\n            onClick={() => onAlignText('center')}\r\n          >\r\n            <FaAlignCenter />\r\n          </button>\r\n          <button\r\n            data-tip=\"Text Align Right\"\r\n            onClick={() => onAlignText('right')}\r\n          >\r\n            <FaAlignRight />\r\n          </button>\r\n        </div>\r\n        <div>\r\n          <button onClick={logCanvas}>LOG JSON</button>\r\n          <button onClick={generatePdf}>download</button>\r\n          <button data-tip=\"Center Horizontally\" onClick={alignCenter}>\r\n            <MdBorderVertical />\r\n          </button>\r\n          <button data-tip=\"Move Up\" onClick={sendForward}>\r\n            <FaSortNumericUp />\r\n          </button>\r\n          <button data-tip=\"Move Down\" onClick={sendBackward}>\r\n            <FaSortNumericDown />\r\n          </button>\r\n          <button onClick={stateChange}>state change</button>\r\n          <button onClick={onRemove}>X</button>\r\n        </div>\r\n\r\n        <input\r\n          type=\"file\"\r\n          id=\"file\"\r\n          onChange={onImageUpload}\r\n          accept=\"image/*\"\r\n        />\r\n        <input\r\n          type=\"number\"\r\n          name=\"quantity\"\r\n          defaultValue={fontSize}\r\n          key={fontSize}\r\n          min=\"10\"\r\n          max=\"80\"\r\n          onChange={onSetFontSize}\r\n        />\r\n      </div>\r\n      <div>\r\n        <div ref={divRef}></div>\r\n        <button\r\n          onClick={() => {\r\n            console.log(jexcelRef.current.getHeaders().split(','));\r\n            console.log(jexcelRef.current.getData());\r\n          }}\r\n        >\r\n          log data\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { readAndCompressImage } from 'browser-image-resizer';\r\n\r\nexport const getBase64ImageFromURL = (url) => {\r\n  return new Promise((resolve, reject) => {\r\n    var img = new Image();\r\n    img.setAttribute('crossOrigin', 'anonymous');\r\n\r\n    img.onload = () => {\r\n      var canvas = document.createElement('canvas');\r\n      canvas.width = img.width;\r\n      canvas.height = img.height;\r\n\r\n      var ctx = canvas.getContext('2d');\r\n      ctx.drawImage(img, 0, 0);\r\n\r\n      var dataURL = canvas.toDataURL('image/png');\r\n      resolve(dataURL);\r\n    };\r\n\r\n    img.onerror = (error) => {\r\n      reject(error);\r\n    };\r\n\r\n    img.src = url;\r\n  });\r\n};\r\n\r\n// export const toDataURL = (url, config) =>\r\n//   fetch(url)\r\n//     .then((response) => response.blob())\r\n//     .then((blob) => readAndCompressImage(blob, config))\r\n//     .then(\r\n//       (blob) =>\r\n//         new Promise((resolve, reject) => {\r\n//           const reader = new FileReader();\r\n//           reader.onloadend = () => resolve(reader.result);\r\n//           reader.onerror = reject;\r\n//           reader.readAsDataURL(blob);\r\n//         })\r\n//     );\r\n\r\nexport const toDataURL = (url, config) =>\r\n  fetch(url)\r\n    .then((response) => response.blob())\r\n    .then(\r\n      (blob) =>\r\n        new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.onloadend = () => resolve(reader.result);\r\n          reader.onerror = reject;\r\n          reader.readAsDataURL(blob);\r\n        })\r\n    );\r\n"],"sourceRoot":""}